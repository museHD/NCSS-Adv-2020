1. 
According to the U.S. census data, in 1990, only 0.27% of surnames started with the letter Q and only 0.82% of surnames contained the letter Q. Write a program that asks the user for their surname and tells them how rare their surname is based on the letter Q.

If their surname starts with the letter Q, your program should print out You have an extremely rare surname! For example:

What is your surname? Quinn
You have an extremely rare surname!
​
Otherwise, if their surname contains a letter Q, your program should print out You have a rare surname! For example:

What is your surname? Rodriquez
You have a rare surname!
​
Otherwise, if their surname does not contain a letter Q, your program should print out No Qs here. For example:

What is your surname? Smith
No Qs here.
​
Your program should ignore the case of the letters when performing these tests. That is, both uppercase and lowercase Qs should be counted.


2. 

IMEI (International Mobile Equipment Identity) numbers are a unique number given to every mobile phone. The IMEI number for a phone can displayed on-screen on most phones by entering *#06# on the dialpad, or alongside other system information in the settings menu on smartphone operating systems. An example IMEI is 490154203237518.

The last digit in an IMEI is a checksum digit, used to validate the correctness of the rest of the digits to try and prevent data entry mistakes. To check if an IMEI is valid, you can use the following algorithm:

From the rightmost digit, which is the check digit, and moving left, double the value of every second digit. If the result of this doubling operation is greater than 9 (e.g. 8 × 2 = 16), then add the digits of the product (e.g. 16 → 1 + 6 = 7).
Take the sum of all the digits.
If the total modulo 10 is equal to 0 (if the total is divisible by 10) then the number is valid.
With our example IMEI, here's the validation process visualised:

IMEI	4	9	0	1	5	4	2	0	3	2	3	7	5	1	8
Doubled	4	18	0	2	5	8	2	0	3	4	3	14	5	2	–
Summed	4 + (1 + 8) + 0 + 2 + 5 + 8 + 2 + 0 + 3 + 4 + 3 + (1 + 4) + 5 + 2 = 52	8
Since 52 + 8 = 60, and 60 modulo 10 = 0, the IMEI is valid.

Write a program that reads in a number, and outputs whether or not the number is a valid IMEI according to the above validation algorithm. Here's some examples of how your program should work:

Enter number: 490154203237518
Valid.
​
Enter number: 490154203237519
Invalid.
​
Enter number: 353918050883590
Valid.
​
Enter number: 45678
Invalid.
​

3. 

Your brother's soccer team had a big carnival over the weekend. Unfortunately, the final results have been lost, and all we have left is files of text commentary for each game noting who scored at what time. The commentary looks like this for each game:

commentary.txt
EASTS versus WESTS
EASTS have scored 25:13
WESTS have scored 26:38
WESTS have scored 40:23
WESTS have scored 42:01
The first line contains the name of the two teams that played in the form <team1> versus <team2>. After that are zero or more lines of the form <team> have scored <timestamp>

Write a program to read this commentary from a file called commentary.txt and output out the final result of the match. For the above file, your program should produce the following output:

WESTS 3
EASTS 1
​
The team names are each one word and should be printed exactly as they appear in the file. Only two teams are in each commentary, and the final result should list the winning team first. If the score is tied, you can list the teams in either order.

4.
When programming in any programming language, one task which the developer always has to consider, irrespective of the language, is what to name their identifiers (variables, functions, classes, etc). There are a lot of thoughts about what makes a good identifier name.

Different languages have different conventions for naming their identifiers. In Python for example, if a function contains more than one word, the words are usually separated using underscores. Other languages have different conventions. Java, for example, uses what is called camelCase, where no separator is used between the multiple words, but instead the first letter of each new word is converted to uppercase. The very first letter of the identifier however is left in lowercase. So for example, there is a method in Java called toString.

Your task here is to write a Python function called to_camel, which takes as input a single string which is a Python variable name. Your function should return the camel case equivalent of the input string. Here are some example uses of your function:

>>> print(to_camel('foo'))
foo
>>> print(to_camel('raw_input'))
rawInput
>>> print(to_camel('num2words'))
num2words
>>> print(to_camel('num_to_SMS'))
numToSMS
There will not be any more than one underscore in a row in the variable names tested, nor will the very first character in the string be an underscore.

Remember
Your to_camel function should return the result to the caller, rather than print the result.
You should submit only your function definition. You should not include any calls to your function that are not enclosed in the if __name__ == '__main__'.

5. 
An autobiographical number is a number where the first digit from the left counts how many of the digit zero is in the number, the second digit counts how many of the digit one is in the number, and so forth up to the tenth digit. If the number has more than ten digits, it is not autobiographical.

For example, 21200 is an autobiographical number because it contains:

2 zeroes
1 one
2 twos
0 threes
0 fours
Write a program that reads an integer from the user, and prints out whether or not the integer is autobiographical. Here are three examples of how your program should work:

Number: 21200
21200 is autobiographical.
​
Number: 3211000
3211000 is autobiographical.
​
Number: 63100010001
63100010001 is not autobiographical.
​
Hint
How many digits can an autobiographical number have?

6. 
When would beta come before alpha in a dictionary? Well, it would if that dictionary used no vowel sort! In no vowel sort, strings are sorted as usual in lexicographical order, except that vowels are ignored. So alpha comes after beta — because lph comes after bt.

Write a function that takes a list of arbitrary strings. The function should return a list of the strings sorted using the "no vowel sort" sort order. Your input will not have any words containing only vowels. You should use the following template for your function, replacing return the_list with your code:

def novowelsort(the_list):
  # TODO perform no vowel sort on `the_list`.
  return the_list
For the given example of alpha and beta, your function should act like this:

>>> print(novowelsort(['alpha', 'beta']))
['beta', 'alpha']
>>> print(novowelsort(['once', 'upon', 'abc', 'time', 'there', 'were', 'some', 'words']))
['abc', 'once', 'upon', 'some', 'there', 'time', 'were', 'words']
For the purposes of this question, vowels are the letters a, e, i, o, and u (and their uppercase variants).

Hint
Use the key keyword-argument to the .sort() method on a list. Don't try and complicate it.
